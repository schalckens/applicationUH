<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\WithoutMiddleware;
//use Database\Factories\RoleFactory;
use App\Models\Role;
use Illuminate\Http\Request;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;

class RoleTest extends TestCase
{
    use RefreshDatabase;
    use WithoutMiddleware;
    private $role;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->role = factory(Role::class)->create();
    }
    
    public function testIndex()
    {
        // // Création Mock
        // $this->mock(Role::class,function ($mock) 
        // {
        //     $mock->shouldReceive('all')->andReturn('roles');
        // });

        //Action
        $response = $this->get(route('roles.index'));

        //Assertions
        $response->assertOk();
        $response->assertViewHas('roles');
    }

    public function testCreate()
    {
        //Action
        $response = $this->get(route('roles.create'));

        //Assertions
        $response->assertOk();
        $response->assertViewIs('roles.create');
    }

    public function testStore()
    {
        
        $data = [
            'name' => 'roletest'
        ];

        //Action
        $response = $this->postJson(route('roles.store'), $data);

        //Assertions
        $response->assertRedirect(route('roles.index'));
        $this->assertDatabaseHas('roles', $data);

    }

    public function testEdit()
    {
        // // Création Mock
        // $this->mock(Role::class,function ($mock) 
        // {
        //     $mock->shouldReceive('findOrFail')->andReturn('role');
        // });

        //Action
        $response = $this->get(route('roles.edit', ['id' => $this->role->id]));

        //Assertions
        $response->assertOk();
        $response->assertViewHas('role');
        $response->assertViewIs('roles.edit');
    }

    public function testUpdate()
    {
        $data = [
            'id' => $this->role->id,
            'name' => 'roleupdate'
        ];

        //Action
        $response = $this->postJson(route('roles.update',['id' => $this->role->id]),$data);
        
        //Assertions
        $response->assertRedirect(route('roles.index'));
        $this->assertDatabaseHas('roles', $data);
    }

    public function testShow()
    {
        // // Création Mock
        // $this->mock(Nationality::class,function ($mock) 
        // {
        //     $mock->shouldReceive('findOrFail')->andReturn('nationality');
        // });


        //Action
        $response = $this->get(route('roles.show', ['id' => $this->role->id]));

        //Assertions
        $response->assertSuccessful();
        $response->assertViewHas('role');
        $response->assertViewIs('roles.show');
    }

    public function testDestroy()
    {
        $data = [
            'id' => $this->role->id,
            'name' => $this->role->name
        ];

        //Action
        $response = $this->postJson(route('roles.delete',['id' => $this->role->id]), $data);

        //Assertions
        $response->assertRedirect(route('roles.index'));
        $this->assertDatabaseMissing('roles',$data);
    }
}
