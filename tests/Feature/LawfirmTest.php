<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\WithoutMiddleware;
//use Database\Factories\LawfirmFactory;
use App\Models\Lawfirm;
use App\Models\Contact;
use Illuminate\Http\Request;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;

class LawfirmTest extends TestCase
{
    use RefreshDatabase;
    use WithoutMiddleware;

    private $contact;
    private $lawfirm;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->contact = factory(Contact::class)->create();
        $this->lawfirm = factory(Lawfirm::class)->create();
        
    }
    
    public function testIndex()
    {
        // // Création Mock
        // $this->mock(Contact::class,function ($mock) 
        // {
        //     $mock->shouldReceive('all')->andReturn('lawfirm');
        // });

        //Action
        $response = $this->get(route('lawfirms.index'));

        //Assertions
        $response->assertOk();
        $response->assertViewHas('lawfirms');
    }

    public function testCreate()
    {
        //Action
        $response = $this->get(route('lawfirms.create'));

        //Assertions
        $response->assertOk();
        $response->assertViewIs('lawfirms.create');
    }

    public function testStore()
    {
        
        $data = [
            'contact_id' => $this->contact->id
        ];

        //Action
        $response = $this->postJson(route('lawfirms.store'), $data);

        //Assertions
        $response->assertRedirect(route('lawfirms.index'));
        $this->assertDatabaseHas('lawfirms', $data);

    }

    public function testEdit()
    {
        // // Création Mock
        // $this->mock(Lawfirm::class,function ($mock) 
        // {
        //     $mock->shouldReceive('findOrFail')->andReturn('lawfirm');
        // });

        //Action
        $response = $this->get(route('lawfirms.edit', ['id' => $this->lawfirm->id]));

        //Assertions
        $response->assertOk();
        $response->assertViewHas('lawfirm');
        $response->assertViewIs('lawfirms.edit');
    }

    public function testUpdate()
    {
        $data = [
            'id' => $this->lawfirm->id,
            'contact_id' => $this->contact->id
        ];

        //Action
        $response = $this->postJson(route('lawfirms.update', ['id' => $this->lawfirm->id]), $data);
        
        //Assertions
        $response->assertRedirect(route('lawfirms.index'));
        $this->assertDatabaseHas('lawfirms', $data);
    }

    public function testShow()
    {
        // // Création Mock
        // $this->mock(Lawfirm::class,function ($mock) 
        // {
        //     $mock->shouldReceive('findOrFail')->andReturn('lawfirm');
        // });

        //Action
        $response = $this->get(route('lawfirms.show', ['id' => $this->lawfirm->id]));

        //Assertions
        $response->assertSuccessful();
        $response->assertViewHas('lawfirm');
        $response->assertViewIs('lawfirms.show');
    }


    public function testDestroy()
    {
        $data = [
            'id' => $this->lawfirm->id,
            'contact_id' => $this->contact->id
        ];

        //Action
        $response = $this->postJson(route('lawfirms.delete',['id' => $this->lawfirm->id]), $data);

        //Assertions
        $response->assertRedirect(route('lawfirms.index'));
        $this->assertDatabaseMissing('lawfirms',$data);
    }
}
