<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\WithoutMiddleware;
//use Database\Factories\LawyerFactory;
use App\Models\Lawyer;
use App\Models\Contact;
use App\Models\Civilstate;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;

class LawyerTest extends TestCase
{
    use RefreshDatabase;
    use WithoutMiddleware;
    private $contact;
    private $civilstate;
    private $user;
    private $lawyer;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->contact = factory(Contact::class)->create();
        $this->civilstate = factory(Civilstate::class)->create();
        $this->user = factory(User::class)->create();
        $this->lawyer = factory(Lawyer::class)->create();
        
    }
    
    public function testIndex()
    {
        // // Création Mock
        // $this->mock(Contact::class,function ($mock) 
        // {
        //     $mock->shouldReceive('all')->andReturn('lawyers');
        // });

        //Action
        $response = $this->get(route('lawyers.index'));

        //Assertions
        $response->assertOk();
        $response->assertViewHas('lawyers');
    }

    public function testCreate()
    {
        //Action
        $response = $this->get(route('lawyers.create'));

        //Assertions
        $response->assertOk();
        $response->assertViewIs('lawyers.create');
    }

    public function testStore()
    {
        
        $data = [
            'contact_id' => $this->contact->id,
            'civilstate_id' => $this->civilstate->id,
            'barreau' => 'dfqdvqdv',
            'user_id' => $this->user->id
        ];

        //Action
        $response = $this->postJson(route('lawyers.store'), $data);

        //Assertions
        $response->assertRedirect(route('lawyers.index'));
        $this->assertDatabaseHas('lawyers', $data);

    }

    public function testEdit()
    {
        // // Création Mock
        // $this->mock(Lawyer::class,function ($mock) 
        // {
        //     $mock->shouldReceive('findOrFail')->andReturn('lawyer');
        // });

        //Action
        $response = $this->get(route('lawyers.edit', ['id' => $this->lawyer->id]));

        //Assertions
        $response->assertOk();
        $response->assertViewHas('lawyer');
        $response->assertViewIs('lawyers.edit');
    }

    public function testUpdate()
    {
        $data = [
            'id' => $this->lawyer->id,
            'contact_id' => $this->contact->id,
            'civilstate_id' => $this->civilstate->id,
            'barreau' => 'dfqdh6dv',
            'user_id' => $this->user->id
        ];

        //Action
        $response = $this->postJson(route('lawyers.update',['id' => $this->lawyer->id]),$data);
        
        //Assertions
        $response->assertRedirect(route('lawyers.index'));
        $this->assertDatabaseHas('lawyers', $data);
    }

    public function testShow()
    {
        // // Création Mock
        // $this->mock(Lawyer::class,function ($mock) 
        // {
        //     $mock->shouldReceive('findOrFail')->andReturn('lawyer');
        // });

        //Action
        $response = $this->get(route('lawyers.show', ['id' => $this->lawyer->id]));

        //Assertions
        $response->assertSuccessful();
        $response->assertViewHas('lawyer');
        $response->assertViewIs('lawyers.show');
    }

    public function testDestroy()
    {
        $data = [
            'id' => $this->lawyer->id,
            'contact_id' => $this->contact->id,
            'civilstate_id' => $this->civilstate->id,
            'barreau' => $this->lawyer->id,
            'user_id' => $this->user->id
        ];

        //Action
        $response = $this->postJson(route('lawyers.delete',['id' => $this->lawyer->id]), $data);

        //Assertions
        $response->assertRedirect(route('lawyers.index'));
        $this->assertDatabaseMissing('lawyers',$data);
    }
}
