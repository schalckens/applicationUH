<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\WithoutMiddleware;
//use Database\Factories\CivilstateFactory;
use App\Models\Civilstate;
use App\Models\User;
use App\Models\Nationality;
use Illuminate\Http\Request;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;

class CivilstateTest extends TestCase
{
    use RefreshDatabase;
    use WithoutMiddleware;
    private $user;
    private $nationality;
    private $civilstate;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = factory(User::class)->create();
        $this->nationality = factory(Nationality::class)->create();
        $this->civilstate = factory(Civilstate::class)->create();
        
    }
    
    public function testIndex()
    {
        // Création Mock
        $this->mock(Civilstate::class,function ($mock) 
        {
            $mock->shouldReceive('all')->andReturn('civilstates');
        });

        //Action
        $response = $this->get(route('civilstates.index'));

        //Assertions
        $response->assertOk();
        $response->assertViewHas('civilstates');
    }

    public function testCreate()
    {
        //Action
        $response = $this->get(route('civilstates.create'));

        //Assertions
        $response->assertOk();
        $response->assertViewIs('civilstates.create');
    }

    public function testStore()
    {
        
        $data = [
            'user_id' => $this->user->id,
            'gender' => 2,
            'name' => 'naaaaaame',
            'birthname' => 'birthnaaaaame',
            'firstname' => 'fiiijkdncik',
            'firstname2' => 'vaidnvvio',
            'firstname3' => 'iojdvfopj',
            'birthdate' => '2021-02-15',
            'birthplace' => 'bcndcdc',
            'nationality_id' => $this->nationality->id
        ];

        //Action
        $response = $this->postJson(route('civilstates.store'), $data);

        //Assertions
        $response->assertRedirect(route('civilstates.index'));
        $this->assertDatabaseHas('civilstates', $data);

    }

    public function testEdit()
    {
        // // Création Mock
        // $this->mock(Civilstate::class,function ($mock) 
        // {
        //     $mock->shouldReceive('findOrFail')->andReturn('civilstate');
        // });

        //Action
        $response = $this->get(route('civilstates.edit', ['id' => $this->civilstate->id]));

        //Assertions
        $response->assertOk();
        $response->assertViewHas('civilstate');
        $response->assertViewIs('civilstates.edit');
    }

    public function testUpdate()
    {
        $data = [
            'id' => $this->civilstate->id,
            'user_id' => $this->user->id,
            'gender' => $this->civilstate->gender,
            'name' => 'sdvde',
            'birthname' => $this->civilstate->birthname,
            'firstname' => $this->civilstate->firstname,
            'firstname2' => $this->civilstate->firstname2,
            'firstname3' => $this->civilstate->firstname3,
            'birthdate' => $this->civilstate->birthdate,
            'birthplace' => $this->civilstate->birthplace,
            'nationality_id' => $this->nationality->id
        ];

        //Action
        $response = $this->postJson(route('civilstates.update',['id' => $this->civilstate->id]),$data);
        
        //Assertions
        $response->assertRedirect(route('civilstates.index'));
        $this->assertDatabaseHas('civilstates', $data);
    }

    public function testShow()
    {
        // // Création Mock
        // $this->mock(Civilstate::class,function ($mock) 
        // {
        //     $mock->shouldReceive('findOrFail')->andReturn('civilstate');
        // });

        //Action
        $response = $this->get(route('civilstates.show', ['id' => $this->civilstate->id]));

        //Assertions
        $response->assertSuccessful();
        $response->assertViewHas('civilstate');
        $response->assertViewIs('civilstates.show');
    }

    public function testDestroy()
    {
        $data = [
            'id' => $this->civilstate->id,
            'user_id' => $this->user->id,
            'gender' => $this->civilstate->gender,
            'name' => $this->civilstate->name,
            'birthname' => $this->civilstate->birthname,
            'firstname' => $this->civilstate->firstname,
            'firstname2' => $this->civilstate->firstname2,
            'firstname3' => $this->civilstate->firstname3,
            'birthdate' => $this->civilstate->birthdate,
            'birthplace' => $this->civilstate->birthplace,
            'nationality_id' => $this->nationality->id
        ];

        //Action
        $response = $this->postJson(route('civilstates.delete',['id' => $this->civilstate->id]), $data);

        //Assertions
        $response->assertRedirect(route('civilstates.index'));
        $this->assertDatabaseMissing('civilstates',$data);
    }
}
